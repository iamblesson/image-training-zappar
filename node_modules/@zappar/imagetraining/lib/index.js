"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.train = void 0;
const jimp_1 = __importDefault(require("jimp"));
const path = __importStar(require("path"));
const binary = require('@mapbox/node-pre-gyp');
async function train(fileOrData, options) {
    const p = binary.find(path.resolve(path.join(__dirname, '../package.json')));
    const addon = require(p);
    let opts = {
        maxWidth: (options === null || options === void 0 ? void 0 : options.maxWidth) || 500,
        maxHeight: (options === null || options === void 0 ? void 0 : options.maxHeight) || 500,
        excludePreview: (options === null || options === void 0 ? void 0 : options.excludePreview) || false
    };
    const image = await (typeof fileOrData === 'string' ? jimp_1.default.read(fileOrData) : jimp_1.default.read(fileOrData));
    if (!image.getWidth() || !image.getHeight())
        throw new Error("Unable to discover width and height of image");
    if (image.getWidth() < 128 || image.getHeight() < 128)
        throw new Error("Image too small (width and/or height < 128px)");
    const buffer = await image.getBufferAsync('image/png');
    let preview;
    if (!opts.excludePreview) {
        const p = await (typeof fileOrData === 'string' ? jimp_1.default.read(fileOrData) : jimp_1.default.read(fileOrData));
        p.scaleToFit(320, 320);
        preview = await p.getBufferAsync('image/jpeg');
    }
    return addon.process(buffer, preview, !opts.excludePreview, opts.maxWidth, opts.maxHeight);
}
exports.train = train;
